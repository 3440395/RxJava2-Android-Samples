package com.rxjava2.android.samples.ui.operators;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import com.rxjava2.android.samples.R;import com.rxjava2.android.samples.utils.AppConstant;import io.reactivex.Observable;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.annotations.NonNull;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;/** * 把一系列事件分隔成多个组合 */public class WindowExampleActivity extends AppCompatActivity {    private static final String TAG = WindowExampleActivity.class.getSimpleName();    Button btn;    TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_example);        btn = (Button) findViewById(R.id.btn);        textView = (TextView) findViewById(R.id.textView);        btn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                doSomeWork();            }        });    }    /*     * Example using window operator -> It periodically     * subdivide items from an Observable into     * Observable windows and emit these windows rather than     * emitting the items one at a time     */    protected void doSomeWork() {//        Observable.interval(1, TimeUnit.SECONDS).take(12)//                .window(3, TimeUnit.SECONDS)//                .subscribeOn(Schedulers.io())//                .observeOn(AndroidSchedulers.mainThread())//                .subscribe(getConsumer());        Observable.fromArray(2,2,2,3,4,44,23,2,322,3,5,6,6,6)                .window(3)                .subscribe(new Consumer<Observable<Integer>>() {                    @Override                    public void accept(@NonNull Observable<Integer> integerObservable) throws Exception {                        Log.e(TAG,"accept==============");                        integerObservable.subscribe(new Consumer<Integer>() {                            @Override                            public void accept(@NonNull Integer integer) throws Exception {                                Log.e(TAG,"accept"+integer);                            }                        });                    }                });    }    public Consumer<Observable<Long>> getConsumer() {        return new Consumer<Observable<Long>>() {            @Override            public void accept(Observable<Long> observable) throws Exception {                Log.d(TAG, "Sub Divide begin....");                textView.append("Sub Divide begin ....");                textView.append(AppConstant.LINE_SEPARATOR);                observable                        .subscribeOn(Schedulers.io())                        .observeOn(AndroidSchedulers.mainThread())                        .subscribe(new Consumer<Long>() {                            @Override                            public void accept(Long value) {                                Log.d(TAG, "Next:" + value);                                textView.append("Next:" + value);                                textView.append(AppConstant.LINE_SEPARATOR);                            }                        });            }        };    }}